using BattleshipGame.Models;
using System.Drawing.Drawing2D;

namespace BattleshipGame
{    public partial class GameSetupForm : Form
    {
        private const int GRID_SIZE = 10;
        private const int CELL_SIZE = 40;
        private const int GRID_OFFSET = 70; // Increased offset to accommodate coordinates
        private Point? hoverCell = null; // For ship placement preview
        private Point? hoverCell = null; // For ship placement preview
        
        private Ship[] ships;
        private Ship? selectedShip;
        private int currentPlayer = 1;
        private bool[,] player1Grid = new bool[GRID_SIZE, GRID_SIZE];
        private bool[,] player2Grid = new bool[GRID_SIZE, GRID_SIZE];
        private Dictionary<Point, Ship> placedShips = new();

        public GameSetupForm()
        {
            InitializeComponent();
            InitializeGame();
        }

        private void InitializeGame()
        {
            this.Text = $"Battleship - Player {currentPlayer} Setup";
            this.Size = new Size(800, 600);
            this.StartPosition = FormStartPosition.CenterScreen;

            // Initialize ships
            ships = new Ship[]
            {
                new Ship("Carrier", 5),
                new Ship("Battleship", 4),
                new Ship("Cruiser", 3),
                new Ship("Submarine", 3),
                new Ship("Destroyer", 2)
            };

            // Create ship selection buttons
            CreateShipButtons();

            // Add rotation button
            Button rotateButton = new Button
            {
                Text = "Rotate Ship (R)",
                Size = new Size(120, 30),
                Location = new Point(GRID_OFFSET + (GRID_SIZE * CELL_SIZE) + 50, GRID_OFFSET + 250)
            };
            rotateButton.Click += (s, e) => RotateSelectedShip();
            this.Controls.Add(rotateButton);

            // Set up mouse and keyboard events
            this.Paint += GameSetupForm_Paint;
            this.MouseMove += GameSetupForm_MouseMove;
            this.MouseClick += GameSetupForm_MouseClick;
            this.KeyDown += GameSetupForm_KeyDown;
        }

        private void CreateShipButtons()
        {
            for (int i = 0; i < ships.Length; i++)
            {
                Button shipButton = new Button
                {
                    Text = $"{ships[i].Name} ({ships[i].Length})",
                    Tag = ships[i],
                    Size = new Size(120, 30),
                    Location = new Point(GRID_OFFSET + (GRID_SIZE * CELL_SIZE) + 50, GRID_OFFSET + (i * 40))
                };
                shipButton.Click += ShipButton_Click;
                this.Controls.Add(shipButton);
            }
        }

        private void ShipButton_Click(object? sender, EventArgs e)
        {
            if (sender is Button button && button.Tag is Ship ship && !ship.IsPlaced)
            {
                selectedShip = ship;
            }
        }        private void GameSetupForm_Paint(object? sender, PaintEventArgs e)
        {
            e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;

            // Draw coordinate labels
            using (var font = new Font("Arial", 12))
            {
                // Draw column labels (A-J)
                for (int i = 0; i < GRID_SIZE; i++)
                {
                    string colLabel = ((char)('A' + i)).ToString();
                    var size = e.Graphics.MeasureString(colLabel, font);
                    e.Graphics.DrawString(colLabel, font, Brushes.Black,
                        GRID_OFFSET + (i * CELL_SIZE) + (CELL_SIZE - size.Width) / 2,
                        GRID_OFFSET - 25);
                }

                // Draw row labels (1-10)
                for (int i = 0; i < GRID_SIZE; i++)
                {
                    string rowLabel = (i + 1).ToString();
                    var size = e.Graphics.MeasureString(rowLabel, font);
                    e.Graphics.DrawString(rowLabel, font, Brushes.Black,
                        GRID_OFFSET - 25 - size.Width,
                        GRID_OFFSET + (i * CELL_SIZE) + (CELL_SIZE - size.Height) / 2);
                }
            }

            // Draw grid with thicker lines
            using (var pen = new Pen(Color.Navy, 1.5f))
            {
                for (int i = 0; i <= GRID_SIZE; i++)
                {
                    // Vertical lines
                    e.Graphics.DrawLine(pen,
                        GRID_OFFSET + (i * CELL_SIZE), GRID_OFFSET,
                        GRID_OFFSET + (i * CELL_SIZE), GRID_OFFSET + (GRID_SIZE * CELL_SIZE));

                    // Horizontal lines
                    e.Graphics.DrawLine(pen,
                        GRID_OFFSET, GRID_OFFSET + (i * CELL_SIZE),
                        GRID_OFFSET + (GRID_SIZE * CELL_SIZE), GRID_OFFSET + (i * CELL_SIZE));
                }
            }            // Draw placed ships
            var currentGrid = currentPlayer == 1 ? player1Grid : player2Grid;
            foreach (var shipPoint in placedShips)
            {
                DrawShipCell(e.Graphics, shipPoint.Key.X, shipPoint.Key.Y, Color.DarkSlateGray);
            }

            // Draw hover preview
            if (selectedShip != null && hoverCell.HasValue && !selectedShip.IsPlaced)
            {
                var previewCells = GetShipPreviewCells(hoverCell.Value.X, hoverCell.Value.Y);
                if (previewCells != null)
                {
                    foreach (var cell in previewCells)
                    {
                        DrawShipCell(e.Graphics, cell.Item1, cell.Item2, 
                            IsValidPlacement(cell.Item1, cell.Item2) ? Color.LightGreen : Color.Red);
                    }
                }
            }
        }

        private (int, int)[]? GetShipPreviewCells(int gridX, int gridY)
        {
            if (selectedShip == null) return null;

            var cells = new (int, int)[selectedShip.Length];
            for (int i = 0; i < selectedShip.Length; i++)
            {
                int x = selectedShip.IsHorizontal ? gridX + i : gridX;
                int y = selectedShip.IsHorizontal ? gridY : gridY + i;
                cells[i] = (x, y);
            }
            return cells;
        }

        private bool IsValidPlacement(int x, int y)
        {
            if (x < 0 || x >= GRID_SIZE || y < 0 || y >= GRID_SIZE)
                return false;

            var currentGrid = currentPlayer == 1 ? player1Grid : player2Grid;
            return !currentGrid[x, y];
        }

        private void DrawShipCell(Graphics g, int gridX, int gridY, Color color)
        {
            var rect = new Rectangle(
                GRID_OFFSET + (gridX * CELL_SIZE) + 1,
                GRID_OFFSET + (gridY * CELL_SIZE) + 1,
                CELL_SIZE - 1,
                CELL_SIZE - 1);
            
            using (var brush = new SolidBrush(color))
            {
                g.FillRectangle(brush, rect);
            }

            // Add a slight 3D effect
            using (var pen = new Pen(Color.FromArgb(color.R / 2, color.G / 2, color.B / 2)))
            {
                g.DrawRectangle(pen, rect);
            }
        }

        private void RotateSelectedShip()
        {
            if (selectedShip != null)
            {
                selectedShip.Rotate();
                this.Invalidate();
            }
        }

        private void GameSetupForm_MouseMove(object? sender, MouseEventArgs e)
        {
            if
